{
  "mcp_protocol_test_cases": {
    "description": "JSON-RPC test cases for MCP STDIO transport",
    "version": "2024-11-05",
    
    "handshake": {
      "initialize_request": {
        "jsonrpc": "2.0",
        "method": "initialize",
        "params": {
          "protocolVersion": "2024-11-05",
          "capabilities": {
            "tools": {}
          },
          "clientInfo": {
            "name": "test-client",
            "version": "1.0.0"
          }
        },
        "id": 1
      },
      "initialized_notification": {
        "jsonrpc": "2.0",
        "method": "notifications/initialized",
        "params": {}
      }
    },
    
    "tool_calls": {
      "health_check": {
        "jsonrpc": "2.0",
        "method": "tools/call",
        "params": {
          "name": "health_check",
          "arguments": {}
        },
        "id": 2
      },
      
      "create_task": {
        "jsonrpc": "2.0",
        "method": "tools/call",
        "params": {
          "name": "create_task",
          "arguments": {
            "code": "TEST-001",
            "name": "Test Task",
            "description": "Testing task creation via STDIO",
            "owner_agent_name": "test-agent"
          }
        },
        "id": 3
      },
      
      "list_tasks": {
        "jsonrpc": "2.0",
        "method": "tools/call",
        "params": {
          "name": "list_tasks",
          "arguments": {}
        },
        "id": 4
      },
      
      "list_tasks_filtered": {
        "jsonrpc": "2.0",
        "method": "tools/call",
        "params": {
          "name": "list_tasks",
          "arguments": {
            "owner_agent_name": "test-agent",
            "state": "Created",
            "limit": 10,
            "offset": 0
          }
        },
        "id": 5
      },
      
      "get_task_by_id": {
        "jsonrpc": "2.0",
        "method": "tools/call",
        "params": {
          "name": "get_task_by_id",
          "arguments": {
            "id": 1
          }
        },
        "id": 6
      },
      
      "get_task_by_code": {
        "jsonrpc": "2.0",
        "method": "tools/call",
        "params": {
          "name": "get_task_by_code",
          "arguments": {
            "code": "TEST-001"
          }
        },
        "id": 7
      },
      
      "update_task": {
        "jsonrpc": "2.0",
        "method": "tools/call",
        "params": {
          "name": "update_task",
          "arguments": {
            "id": 1,
            "name": "Updated Test Task",
            "description": "Task updated via STDIO transport"
          }
        },
        "id": 8
      },
      
      "set_task_state": {
        "jsonrpc": "2.0",
        "method": "tools/call",
        "params": {
          "name": "set_task_state",
          "arguments": {
            "id": 1,
            "state": "InProgress"
          }
        },
        "id": 9
      },
      
      "assign_task": {
        "jsonrpc": "2.0",
        "method": "tools/call",
        "params": {
          "name": "assign_task",
          "arguments": {
            "id": 1,
            "new_owner_agent_name": "assigned-agent"
          }
        },
        "id": 10
      },
      
      "archive_task": {
        "jsonrpc": "2.0",
        "method": "tools/call",
        "params": {
          "name": "archive_task",
          "arguments": {
            "id": 1
          }
        },
        "id": 11
      }
    },
    
    "error_test_cases": {
      "invalid_json": "invalid json string",
      
      "missing_jsonrpc": {
        "method": "initialize",
        "id": 1
      },
      
      "wrong_jsonrpc_version": {
        "jsonrpc": "1.0",
        "method": "initialize",
        "id": 1
      },
      
      "missing_method": {
        "jsonrpc": "2.0",
        "id": 1
      },
      
      "unknown_method": {
        "jsonrpc": "2.0",
        "method": "unknown_method",
        "id": 1
      },
      
      "tool_before_initialize": {
        "jsonrpc": "2.0",
        "method": "tools/call",
        "params": {
          "name": "health_check",
          "arguments": {}
        },
        "id": 1
      },
      
      "unknown_tool": {
        "jsonrpc": "2.0",
        "method": "tools/call",
        "params": {
          "name": "unknown_tool",
          "arguments": {}
        },
        "id": 2
      },
      
      "missing_required_params": {
        "jsonrpc": "2.0",
        "method": "tools/call",
        "params": {
          "name": "create_task",
          "arguments": {
            "code": "INCOMPLETE"
          }
        },
        "id": 3
      },
      
      "invalid_task_state": {
        "jsonrpc": "2.0",
        "method": "tools/call",
        "params": {
          "name": "set_task_state",
          "arguments": {
            "id": 1,
            "state": "InvalidState"
          }
        },
        "id": 4
      },
      
      "nonexistent_task": {
        "jsonrpc": "2.0",
        "method": "tools/call",
        "params": {
          "name": "get_task_by_id",
          "arguments": {
            "id": 999999
          }
        },
        "id": 5
      }
    },
    
    "workflow_test": {
      "description": "Complete task lifecycle workflow",
      "steps": [
        {
          "step": 1,
          "action": "initialize",
          "message": {
            "jsonrpc": "2.0",
            "method": "initialize",
            "params": {
              "protocolVersion": "2024-11-05",
              "capabilities": {"tools": {}},
              "clientInfo": {"name": "workflow-test", "version": "1.0.0"}
            },
            "id": 1
          }
        },
        {
          "step": 2,
          "action": "initialized_notification",
          "message": {
            "jsonrpc": "2.0",
            "method": "notifications/initialized",
            "params": {}
          }
        },
        {
          "step": 3,
          "action": "create_task",
          "message": {
            "jsonrpc": "2.0",
            "method": "tools/call",
            "params": {
              "name": "create_task",
              "arguments": {
                "code": "WF-001",
                "name": "Workflow Test Task",
                "description": "Task for testing complete workflow",
                "owner_agent_name": "workflow-agent"
              }
            },
            "id": 2
          }
        },
        {
          "step": 4,
          "action": "verify_creation",
          "message": {
            "jsonrpc": "2.0",
            "method": "tools/call",
            "params": {
              "name": "get_task_by_code",
              "arguments": {
                "code": "WF-001"
              }
            },
            "id": 3
          }
        },
        {
          "step": 5,
          "action": "start_work",
          "message": {
            "jsonrpc": "2.0",
            "method": "tools/call",
            "params": {
              "name": "set_task_state",
              "arguments": {
                "id": 1,
                "state": "InProgress"
              }
            },
            "id": 4
          }
        },
        {
          "step": 6,
          "action": "update_details",
          "message": {
            "jsonrpc": "2.0",
            "method": "tools/call",
            "params": {
              "name": "update_task",
              "arguments": {
                "id": 1,
                "name": "Updated Workflow Task",
                "description": "Task updated during workflow progression"
              }
            },
            "id": 5
          }
        },
        {
          "step": 7,
          "action": "reassign",
          "message": {
            "jsonrpc": "2.0",
            "method": "tools/call",
            "params": {
              "name": "assign_task",
              "arguments": {
                "id": 1,
                "new_owner_agent_name": "workflow-assignee"
              }
            },
            "id": 6
          }
        },
        {
          "step": 8,
          "action": "complete_task",
          "message": {
            "jsonrpc": "2.0",
            "method": "tools/call",
            "params": {
              "name": "set_task_state",
              "arguments": {
                "id": 1,
                "state": "Done"
              }
            },
            "id": 7
          }
        },
        {
          "step": 9,
          "action": "archive",
          "message": {
            "jsonrpc": "2.0",
            "method": "tools/call",
            "params": {
              "name": "archive_task",
              "arguments": {
                "id": 1
              }
            },
            "id": 8
          }
        },
        {
          "step": 10,
          "action": "list_final_state",
          "message": {
            "jsonrpc": "2.0",
            "method": "tools/call",
            "params": {
              "name": "list_tasks",
              "arguments": {}
            },
            "id": 9
          }
        }
      ]
    },
    
    "concurrent_test": {
      "description": "Test concurrent STDIO sessions",
      "sessions": [
        {
          "session_id": "A",
          "client_name": "concurrent-A",
          "tasks": [
            {
              "code": "CONC-A001",
              "name": "Concurrent Task A1",
              "owner": "agent-A"
            },
            {
              "code": "CONC-A002", 
              "name": "Concurrent Task A2",
              "owner": "agent-A"
            }
          ]
        },
        {
          "session_id": "B",
          "client_name": "concurrent-B",
          "tasks": [
            {
              "code": "CONC-B001",
              "name": "Concurrent Task B1", 
              "owner": "agent-B"
            }
          ]
        },
        {
          "session_id": "C",
          "client_name": "concurrent-C",
          "tasks": [
            {
              "code": "CONC-C001",
              "name": "Concurrent Task C1",
              "owner": "agent-C"
            },
            {
              "code": "CONC-C002",
              "name": "Concurrent Task C2", 
              "owner": "agent-C"
            }
          ]
        }
      ]
    },
    
    "performance_test": {
      "description": "Performance and load testing scenarios",
      "scenarios": [
        {
          "name": "burst_create",
          "description": "Create 10 tasks rapidly in sequence",
          "task_count": 10,
          "code_pattern": "PERF-{i:03d}",
          "expected_response_time_ms": 500
        },
        {
          "name": "large_list",
          "description": "List tasks after creating many", 
          "setup_task_count": 100,
          "expected_response_time_ms": 1000
        },
        {
          "name": "complex_workflow",
          "description": "Full workflow with all operations",
          "operations": ["create", "update", "state_change", "assign", "archive"],
          "expected_total_time_ms": 2000
        }
      ]
    }
  },
  
  "usage_examples": {
    "basic_session": {
      "description": "Basic MCP session example",
      "command": "cat stdio_test_cases.json | jq -r '.mcp_protocol_test_cases.handshake.initialize_request' | ./target/release/mcp-server --transport stdio"
    },
    
    "tool_testing": {
      "description": "Test individual tools",
      "commands": [
        "echo '{\"jsonrpc\":\"2.0\",\"method\":\"initialize\",\"params\":{\"protocolVersion\":\"2024-11-05\",\"capabilities\":{\"tools\":{}},\"clientInfo\":{\"name\":\"test\",\"version\":\"1.0.0\"}},\"id\":1}' | ./target/release/mcp-server --transport stdio",
        "echo '{\"jsonrpc\":\"2.0\",\"method\":\"notifications/initialized\",\"params\":{}}' | ./target/release/mcp-server --transport stdio",
        "cat stdio_test_cases.json | jq -r '.mcp_protocol_test_cases.tool_calls.health_check' | ./target/release/mcp-server --transport stdio"
      ]
    },
    
    "error_testing": {
      "description": "Test error handling",
      "commands": [
        "echo 'invalid json' | ./target/release/mcp-server --transport stdio",
        "cat stdio_test_cases.json | jq -r '.mcp_protocol_test_cases.error_test_cases.unknown_method' | ./target/release/mcp-server --transport stdio"
      ]
    }
  }
}