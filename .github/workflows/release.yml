name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build-release:
    name: Build Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux x86_64 (musl for static linking)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            platform: linux
            arch: amd64
            
          # Linux aarch64 (musl for static linking)
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            platform: linux
            arch: arm64
            use_cross: true
            
          # macOS x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            platform: darwin
            arch: amd64
            
          # macOS ARM64
          - os: macos-latest
            target: aarch64-apple-darwin
            platform: darwin
            arch: arm64
            
          # Windows x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: windows
            arch: amd64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl tools
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools musl-dev

      - name: Install cross
        if: matrix.use_cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      # Build for most targets
      - name: Build binary
        if: "!matrix.use_cross"
        env:
          # Use rustls instead of native-tls for musl builds
          CARGO_NET_GIT_FETCH_WITH_CLI: true
        shell: bash
        run: |
          # Set environment variables for musl cross-compilation
          if [ "${{ matrix.target }}" = "x86_64-unknown-linux-musl" ]; then
            export OPENSSL_STATIC=1
            export OPENSSL_DIR=/usr
            export PKG_CONFIG_ALLOW_CROSS=1
            export CC=musl-gcc
          fi
          cargo build --release --target ${{ matrix.target }} --bin axon-mcp
          
      # Build using cross for aarch64-linux
      - name: Build binary with cross
        if: matrix.use_cross
        run: |
          cross build --release --target ${{ matrix.target }} --bin axon-mcp

      # Prepare binary
      - name: Prepare binary
        shell: bash
        run: |
          # Set binary path
          if [ "${{ runner.os }}" = "Windows" ]; then
            BINARY_PATH="target/${{ matrix.target }}/release/axon-mcp.exe"
          else
            BINARY_PATH="target/${{ matrix.target }}/release/axon-mcp"
          fi
          
          # Strip binary (except on Windows)
          if [ "${{ runner.os }}" != "Windows" ]; then
            strip "$BINARY_PATH" || true
          fi
          
          echo "BINARY_PATH=$BINARY_PATH" >> $GITHUB_ENV

      # Install and run UPX for binary compression
      - name: Compress binary with UPX
        shell: bash
        run: |
          # Install UPX
          if [ "${{ runner.os }}" = "Linux" ]; then
            sudo apt-get update && sudo apt-get install -y upx
          elif [ "${{ runner.os }}" = "Windows" ]; then
            choco install upx -y
          fi
          
          # Compress binary (best compression)
          if command -v upx >/dev/null 2>&1; then
            echo "Compressing binary with UPX..."
            upx --best --lzma "${{ env.BINARY_PATH }}" || true
            
            # Show size reduction
            ls -lh "${{ env.BINARY_PATH }}"
          fi

      # Package artifacts
      - name: Package artifacts
        shell: bash
        run: |
          mkdir -p dist
          
          # Extract version from tag (remove 'v' prefix)
          VERSION=${GITHUB_REF#refs/tags/v}
          
          # Generate beautiful asset name: axon-mcp-{platform}-{arch}-v{version}
          ASSET_NAME="axon-mcp-${{ matrix.platform }}-${{ matrix.arch }}-v${VERSION}"
          
          if [ "${{ runner.os }}" = "Windows" ]; then
            # For Windows, create a zip file
            cd "$(dirname "${{ env.BINARY_PATH }}")"
            7z a "$GITHUB_WORKSPACE/dist/${ASSET_NAME}.zip" "axon-mcp.exe"
            echo "ASSET_PATH=dist/${ASSET_NAME}.zip" >> $GITHUB_ENV
          else
            # For Unix, create a tar.gz
            cd "$(dirname "${{ env.BINARY_PATH }}")"
            tar -czf "$GITHUB_WORKSPACE/dist/${ASSET_NAME}.tar.gz" "axon-mcp"
            echo "ASSET_PATH=dist/${ASSET_NAME}.tar.gz" >> $GITHUB_ENV
          fi
          
          echo "ASSET_NAME=${ASSET_NAME}" >> $GITHUB_ENV

      # Upload artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ASSET_NAME }}
          path: ${{ env.ASSET_PATH }}

  create-release:
    name: Create Release
    needs: build-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Generate checksums
        run: |
          cd dist
          # Find all tar.gz and zip files (artifacts are now in individual directories)
          find . -type f \( -name "*.tar.gz" -o -name "*.zip" \) -exec sha256sum {} \; > checksums.txt
          cat checksums.txt

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/**/*.tar.gz
            dist/**/*.zip
            dist/checksums.txt
            install.sh
            install.ps1
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update install script URL
        run: |
          echo "Installation script available at:"
          echo "https://raw.githubusercontent.com/${{ github.repository }}/main/install.sh"
          echo ""
          echo "Quick install command:"
          echo "curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/main/install.sh | sh"